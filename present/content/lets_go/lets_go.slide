# Let's Go!
An Introduction to the Go Programming Environment
18 Jun 2024

Arnaud Lasnier

## Introduction

## Who Am I?

<!-- ```
> whoami
Arnaud Lasnier, SWE @ Back Market & Go Enthusiast
``` -->

Hi! My name is **Arnaud**. I'm a software engineer at **Back Market** and a Go enthusiast.

Do you think you can spot me? All right, I'll help you: I'm wearing a blue T-shirt.

.image keep_back_market_weird.jpeg 350 _
.caption All Hands, June 2022. Where's Wally?

## History

Legend has it that these three gentlemen were waiting for a 45-minute C++ build to finish when they decided to create a new programming language. That was in 2007.

.image go_creators.jpeg
.caption Robert Griesemer, Rob Pike and Ken Thomson

## Who Uses Go Today?

- **Products:** Docker, Kubernetes, Ethereum, Terraform, Github CLI, esbuild, Prometheus, InfluxDB, Grafana, CockroachDB, Hugo, Traefik, Caddy, Mattermost, etc.
- **Companies:**
	- **In the US:** Google, Dropbox, Uber, Paypal, Twitch, Capital One, etc.
	- **In France:**
		- As their main backend language: **OVH, Le Bon Coin, Qonto, Ankorstore, Lydia, etc.**
		- As a secondary language: **BlaBlaCar, Mirakl, ManoMano and... Back Market!**

<!-- ## Philosophy

-   focus on simplicity

	> "The key point here is our programmers are Googlers, they’re not researchers. They’re typically, fairly young, fresh out of school, probably learned Java, maybe learned C or C++, probably learned Python. They’re not capable of understanding a brilliant language but we want to use them to build good software. So, the language that we give them has to be easy for them to understand and easy to adopt." — Rob Pike

-   very careful design

	> "Consensus drove the design. Nothing went into the language until [Ken Thompson, Robert Griesemer, and myself] all agreed that it was right. Some features didn’t get resolved until after a year or more of discussion." — Rob Pike

-   focus on compatibility

	> "Go 2, in the sense of breaking with the past and no longer compiling old programs, is never going to happen. Go 2 in the sense of being the major revision of Go 1 we started toward in 2017 has already happened." — Russ Cox -->

## Go Primer

## Hello World!

.play -edit hello_world.go

## Variables & Zero Values

Business as usual:

```go
var i int         // declaration
i = 10            // assignment
var j int = 10    // declaration and assignment
k := 10           // short notation, feels like Pascal!
```

However, variables declared without an explicit initial value are given their **zero value**.

<!-- The zero value is:

- `0` for numeric types,
- `false` for the boolean type,
- `""` (the empty string) for strings. -->

.play -numbers zero_values.go

## Nil

The zero value of the following Go types is **`nil`**.

```go
var p *int              // nil (pointer)
var s []int             // nil (slice)
var m map[string]int    // nil (map)
var c chan int          // nil (channel)
var f func()            // nil (function)
var i interface{}       // nil (interface)
```

`nil` is not a value on its own: it must have a type. So the following does **not** even compile:

.play nil_equals_nil.go

## Pointers

Just like C, Go is a **pass-by-value language** and has **pointers**:

.play -numbers increment.go /START OMIT/,/END OMIT/

Just like Java, you cannot dereference a `nil` pointer without a **runtime error**:

.play -numbers nil_deref.go

<!-- Unlike C, there is no pointer arithmetic in Go. -->

<!-- .play -numbers pointers.go -->

## Arrays & Slices

- `make`
- `append`

## Structs, Tags & Methods

A **struct** is a collection of fields. Fields can have **tags**. Structs can have **methods**.

.play -numbers structs.go

## Interfaces

The `http.Handler` interface is defined like this:

```go
type Handler interface {
	ServeHTTP(ResponseWriter, *Request)
}
```

Let's define a `HelloWorldHandler` type that implements the `http.Handler` interface:

.code -numbers handler.go

<!-- No implement keyword. -->
<!-- Interfaces in Go have a **runtime value**. And their zero value is the **`nil`** interface. -->

## Getting a Feel for Go

Let's build something more concrete than hello world!

## Ouch!

That's a lot of:

```go
if err != nil {
	...
}
```

Well, get used to it! There **is** value in making errors explicit at the expense of concision.

## Selling Points

-   simple language
-   static typing
-   static linking
-   fast compile times
-   cross-compilation support
- 	explicit error handling
-   documentation on [pkg.go.dev](https://pkg.go.dev/)
-   amazing concurrency model (goroutines)
-   consistent formatting and programming style
-   comprehensive toolchain (the `go` CLI)
-   comprehensive standard library

























<!-- ## Testing -->

<!-- ## Coverage -->

<!-- ## Amazing Toolchain -->

<!-- - **`go build`** — compile packages and dependencies -->
<!-- - **`go run`** — compile and run Go program -->
<!-- - **`go install`** — compile and install packages and dependencies -->
<!-- --- -->
<!-- - **`go fmt`** — reformat package sources -->
<!-- - **`go test`** — test packages -->
<!-- - **`go tool cover`** — generate a coverage report -->
<!-- --- -->
<!-- - **`go mod init`** — initialize new module in current directory -->
<!-- - **`go mod tidy`** — add missing and remove unused modules -->
<!-- - **`go get`** — add dependencies to current module and install them -->

<!-- ## Amazing Standard Library -->

<!-- - **`fmt`** — formatted I/O with functions analogous to C's `printf` and `scanf` -->
<!-- - **`log/slog`** — structured logging -->
<!-- --- -->
<!-- - **`io`** — interfaces to I/O primitives -->
<!-- - **`os`** — working with files, permissions, external commands and environment variables -->
<!-- - **`time`** — measuring and displaying time -->
<!-- --- -->
<!-- - **`database/sql`** — generic interface around SQL (or SQL-like) databases -->
<!-- - **`net/http`** — HTTP client and server implementations -->
<!-- - **`encoding/json`** — encoding and decoding JSON -->
<!-- - **`text/template`** — template engine -->

<!-- ## Modules, Packages & Visibility -->

<!-- - A **module** is a collection of packages that are released, versioned, and distributed together. -->
<!-- - Modules are downloaded directly from **version control repositories** (usually Git). -->
<!-- - A **package** within a module is a collection of source files in the same **directory** that are compiled together. -->
<!-- - Each file in a package must have the same **package declaration**. -->
<!-- - All identifiers defined within a package are visible throughout that package. -->
<!-- - When importing a package you can access only its exported identifiers. An identifier is exported if it begins with a **capital letter**. -->

<!-- ## Imports -->

<!-- There are four ways to import a package in Go, but the first one is by far the most common: -->

<!-- ```go
import (
    "database/sql"                          // import as "sql"
    nethttp "net/http"                      // import as "nethttp" (instead of "http")
    _ "github.com/jackc/pgx/v5/stdlib"      // only execute side effects
	. "github.com/maragudk/gomponents/html" // import everything in scope (useful for DSLs)
)
``` -->

<!-- And there are two additional tricky rules: -->

<!-- ```go
import (
	"github.com/google/go-cmp" // imported as "cmp" (because of the package declaration)
	"github.com/jackc/pgx/v5"  // imported as "pgx" (because "v5" is only the version tag)
)
``` -->

<!-- ## Project Structure -->

<!-- ## Interfaces Are Satisfied Implicitly -->

<!-- ## Consequence: No Upfront Design -->

<!-- ## Deferred Functions -->

<!-- A deferred function is executed **when the surrounding function returns**, either on exit or on panic. Deferred functions are commonly used for **clean-up actions**, such as closing a file or unlocking a mutex. -->

<!-- ```go
file, err := os.Open("/path/to/file")
if err != nil {
	panic(err)
}
defer file.Close()
_, err = file.Write([]byte("Go is awesome!"))
if err != nil {
	panic(err)
}
``` -->

<!-- In case there are multiple deferred functions, they are executed in **LIFO order**. -->

<!-- ## A Simple Language... -->

<!-- Unlike Java, C#, Python, JavaScript: -->

<!-- -   no classes but **structs** instead -->
<!-- -   no inheritance but **composition** instead -->
<!-- -   no class constructors but **plain functions** instead -->
<!-- -   no annotations but **struct tags** instead -->
<!-- -   no exceptions but **errors as return values** instead -->
<!-- -   no optional arguments -->

<!-- ## ... and amazing tooling... -->

<!-- These tools are so fast that they can run in the CI, at pre-commit time or even at save time! -->

<!-- - **`gopls`** — LSP server (language server protocol) -->
<!-- - **`present`** — display slide presentations _(like this one)_ and articles -->
<!-- - golangci-lint -->
<!-- - goreleaser -->
<!-- - air -->
<!-- - direnv -->

<!-- Code Generators -->

<!-- - bobgen-psql -->
<!-- - gotext -->
<!-- - kin -->
<!-- - oapi-codegen -->

<!-- ## Testing -->


























## Information Systems In Go

## Let Me Tell You A Story About Ping-Pong!

.image ping_pong_paris_office.jpg 400 _
.caption Paris office basement, after 6 p.m.

## Random Knockout Tournaments

Also called **single-elimination tournaments** without any seeding.

<!-- .image snoopy_table_tennis.gif -->

.image ping_pong_tournament_2024.jpg 400 _
.caption Actual tournament organized at the Paris office

## Product Requirements Definition

Multiple use cases:

1.   Creating tournaments.
2.   Registering players to the tournament.
3.   Pairing players randomly.
4.   Displaying past, present and future matches.
5.   Beginning the tournament and setting due dates to each matches.
6.   Entering match results.

## Architectural Choices

<!-- This decision tree never failed me! -->
<!-- I highly recommend his book: [Learning Domain-Driven Design](https://www.oreilly.com/library/view/learning-domain-driven-design/9781098100124/). -->

.image tactical_design_decision_tree.png 480 _
.caption Tactical Design Decision Tree (by Vlad Khononov)

## Our Application Service

Based on the product requirements and our architectural choice, we have something like this:

```go
type Service struct {
	db *sql.DB
}

func NewService(db *sql.DB) *Service {
	return &Service{db: db}
}

func (s *Service) CreatePlayer(playerToCreate *PlayerSetter) (*Player, error) {}
func (s *Service) DeletePlayer(player *Player) error {}
func (s *Service) CreateTournamentDraft(participants ...*Player) (*Tournament, error) {}
func (s *Service) AddParticipants(tournament *Tournament, participants ...*Player) error {}
func (s *Service) RemoveParticipants(tournament *Tournament, participants ...*Player) error {}
func (s *Service) CheckTournamentDraft(tournament *models.Tournament) error {}
func (s *Service) StartTournament(tournament *models.Tournament) error {}
func (s *Service) EnterMatchResult(match *models.Match, score1 int, score2 int) error {}
```

## Conceptual Data Model

## Physical Data Model (PostgreSQL)

## go:embed Directive

## Running Migrations

## Recoverable VS Unrecoverable Errors

## Error Handling

From the [Uber Go Style Guide](https://github.com/uber-go/guide):

<table>
	<thead>
		<tr>
			<th>Error matching?</th>
			<th>Error Message</th>
			<th>Guidance</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>No</td>
			<td>static</td>
			<td><a href="https://pkg.go.dev/errors#New" rel="nofollow"><code>errors.New</code></a></td>
		</tr>
		<tr>
			<td>No</td>
			<td>dynamic</td>
			<td><a href="https://pkg.go.dev/fmt#Errorf" rel="nofollow"><code>fmt.Errorf</code></a></td>
		</tr>
		<tr>
			<td>Yes</td>
			<td>static</td>
			<td>top-level <code>var</code> with <a href="https://pkg.go.dev/errors#New" rel="nofollow"><code>errors.New</code></a></td>
		</tr>
		<tr>
			<td>Yes</td>
			<td>dynamic</td>
			<td>custom <code>error</code> type</td>
		</tr>
	</tbody>
</table>

## database/sql

- `*sql.DB`
- `*sql.Tx`
- `*sql.Conn`
- drivers are loaded by a blank import (`sqlite3`)
- or the `*sql.DB` is built on top of an existing connection pool (`pgx`)
- too low-level

## The Horrible Truth About No Inheritance

## Bob: a delightful ORM generator

- use it as a simple entity framework in your code
- or to craft arbitrary complex queries
- explain the process:
	- test containers -> connection string in `.envrc`
	- code generator connects to DB, introspects schema and write the `models` package

## Database Tests Isolation

- `sql.BeginTx` returns a `*sql.Tx` that maps to a transaction
- we cannot nest transactions
- `database/sql` does not offer savepoint control
- so if the system under test is transactional, we cannot wrap it with a transaction in our test
- solutions for test iso:
	- create a new database for each test
	- write your tests so that they don't read/write data that were not set up at the beginning of the test

## Using Pointers for Optionality

For a long time, Go did not have optionals. So people used pointers instead.

.play -numbers opt_unsafe.go

## Using True Optionals (Go 1.18+)

.play -numbers opt_safe.go

## Concurrency & Goroutines

<!-- A concurrent program is one that **can** be parallelized. Go supports concurrent programming through **goroutines** that are **multiplexed** on system threads. -->
The **`go` keyword** starts the execution of a function call as an independent concurrent thread of control, or **goroutine**, within the same address space.

.play -edit -numbers goroutine.go /START OMIT/,/END OMIT/

Goroutines are cheap to create because they are **multiplexed** on system threads. In fact, they are so cheap that it is common to create **tens of thousands** of them in the same address space.

<!-- Why goroutines instead of threads? -->
<!-- https://go.dev/doc/faq#goroutines -->

## HTTP Servers in Go

- handlers
- router
- middleware

## HTML Partials with `html/template`

.play -numbers template.go /START OMIT/,/END OMIT/

## Type-Safety Issue

## Gomponents to the rescue!

## Interactivity With HTMX

## OpenAPI

- `kin`
- `oapi-codegen`

## Tool Versioning

## What I Left Out

I purposefully skipped a few things to shorten this talk:

- **`new`, `recover`** and other [builtin functions](https://pkg.go.dev/builtin)
- **type assertions** and **type switches**
- **type embedding** to simplify delegation
- **type parameters** for generic programming
- **channels** (the `chan` type) to send messages between goroutines
- **mutexes** to synchronize goroutines
- **contexts** to carry request-specific values

Don't hesitate to look them up!

## Where to go from here?

1.  Install go on your machine:
	[go.dev/dl](https://go.dev/dl)
2.  Get familiar with the language:
	[go.dev/tour](https://go.dev/tour)
3.  Get familiar with the `go` CLI:
	[pkg.go.dev/cmd/go](https://pkg.go.dev/cmd/go)
4.  Get familiar with the standard library:
	[pkg.go.dev/std](https://pkg.go.dev/std)
5.  Build and run this code:
	[github.com/ArnaudLasnier/pingpong](https://github.com/ArnaudLasnier/pingpong)
