// Code generated by the local DBGEN tool. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// Migration is an object representing the database table.
type Migration struct {
	Version int64 `db:"version,pk" `
	Dirty   bool  `db:"dirty" `
}

// MigrationSlice is an alias for a slice of pointers to Migration.
// This should almost always be used instead of []*Migration.
type MigrationSlice []*Migration

// Migrations contains methods to work with the migration table
var Migrations = psql.NewTablex[*Migration, MigrationSlice, *MigrationSetter]("", "migration")

// MigrationsQuery is a query on the migration table
type MigrationsQuery = *psql.ViewQuery[*Migration, MigrationSlice]

// MigrationsStmt is a prepared statment on migration
type MigrationsStmt = bob.QueryStmt[*Migration, MigrationSlice]

// MigrationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type MigrationSetter struct {
	Version omit.Val[int64] `db:"version,pk"`
	Dirty   omit.Val[bool]  `db:"dirty"`
}

func (s MigrationSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.Version.IsUnset() {
		vals = append(vals, "version")
	}

	if !s.Dirty.IsUnset() {
		vals = append(vals, "dirty")
	}

	return vals
}

func (s MigrationSetter) Overwrite(t *Migration) {
	if !s.Version.IsUnset() {
		t.Version, _ = s.Version.Get()
	}
	if !s.Dirty.IsUnset() {
		t.Dirty, _ = s.Dirty.Get()
	}
}

func (s MigrationSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 2)
	if s.Version.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Version)
	}

	if s.Dirty.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Dirty)
	}

	return im.Values(vals...)
}

func (s MigrationSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s MigrationSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.Version.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	if !s.Dirty.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "dirty")...),
			psql.Arg(s.Dirty),
		}})
	}

	return exprs
}

type migrationColumnNames struct {
	Version string
	Dirty   string
}

var MigrationColumns = struct {
	Version psql.Expression
	Dirty   psql.Expression
}{
	Version: psql.Quote("migration", "version"),
	Dirty:   psql.Quote("migration", "dirty"),
}

type migrationWhere[Q psql.Filterable] struct {
	Version psql.WhereMod[Q, int64]
	Dirty   psql.WhereMod[Q, bool]
}

func MigrationWhere[Q psql.Filterable]() migrationWhere[Q] {
	return migrationWhere[Q]{
		Version: psql.Where[Q, int64](MigrationColumns.Version),
		Dirty:   psql.Where[Q, bool](MigrationColumns.Dirty),
	}
}

// FindMigration retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindMigration(ctx context.Context, exec bob.Executor, VersionPK int64, cols ...string) (*Migration, error) {
	if len(cols) == 0 {
		return Migrations.Query(
			ctx, exec,
			SelectWhere.Migrations.Version.EQ(VersionPK),
		).One()
	}

	return Migrations.Query(
		ctx, exec,
		SelectWhere.Migrations.Version.EQ(VersionPK),
		sm.Columns(Migrations.Columns().Only(cols...)),
	).One()
}

// MigrationExists checks the presence of a single record by primary key
func MigrationExists(ctx context.Context, exec bob.Executor, VersionPK int64) (bool, error) {
	return Migrations.Query(
		ctx, exec,
		SelectWhere.Migrations.Version.EQ(VersionPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Migration
func (o *Migration) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Version)
}

// Update uses an executor to update the Migration
func (o *Migration) Update(ctx context.Context, exec bob.Executor, s *MigrationSetter) error {
	return Migrations.Update(ctx, exec, s, o)
}

// Delete deletes a single Migration record with an executor
func (o *Migration) Delete(ctx context.Context, exec bob.Executor) error {
	return Migrations.Delete(ctx, exec, o)
}

// Reload refreshes the Migration using the executor
func (o *Migration) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Migrations.Query(
		ctx, exec,
		SelectWhere.Migrations.Version.EQ(o.Version),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o MigrationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals MigrationSetter) error {
	return Migrations.Update(ctx, exec, &vals, o...)
}

func (o MigrationSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Migrations.Delete(ctx, exec, o...)
}

func (o MigrationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	VersionPK := make([]int64, len(o))

	for i, o := range o {
		VersionPK[i] = o.Version
	}

	mods = append(mods,
		SelectWhere.Migrations.Version.In(VersionPK...),
	)

	o2, err := Migrations.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Version != old.Version {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
