// Code generated by the local DBGEN tool. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"

	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
)

var TableNames = struct {
	Matches                  string
	Migrations               string
	Players                  string
	Tournaments              string
	TournamentParticipations string
}{
	Matches:                  "match",
	Migrations:               "migration",
	Players:                  "player",
	Tournaments:              "tournament",
	TournamentParticipations: "tournament_participation",
}

var ColumnNames = struct {
	Matches                  matchColumnNames
	Migrations               migrationColumnNames
	Players                  playerColumnNames
	Tournaments              tournamentColumnNames
	TournamentParticipations tournamentParticipationColumnNames
}{
	Matches: matchColumnNames{
		ID:             "id",
		TournamentID:   "tournament_id",
		ParentMatch1ID: "parent_match_1_id",
		ParentMatch2ID: "parent_match_2_id",
		DueAt:          "due_at",
		Opponent1ID:    "opponent_1_id",
		Opponent1Score: "opponent_1_score",
		Opponent2ID:    "opponent_2_id",
		Opponent2Score: "opponent_2_score",
	},
	Migrations: migrationColumnNames{
		Version: "version",
		Dirty:   "dirty",
	},
	Players: playerColumnNames{
		ID:        "id",
		FirstName: "first_name",
		LastName:  "last_name",
		Email:     "email",
	},
	Tournaments: tournamentColumnNames{
		ID:        "id",
		Title:     "title",
		Status:    "status",
		StartedAt: "started_at",
		EndedAt:   "ended_at",
	},
	TournamentParticipations: tournamentParticipationColumnNames{
		TournamentID:  "tournament_id",
		ParticipantID: "participant_id",
	},
}

var (
	SelectWhere = Where[*dialect.SelectQuery]()
	InsertWhere = Where[*dialect.InsertQuery]()
	UpdateWhere = Where[*dialect.UpdateQuery]()
	DeleteWhere = Where[*dialect.DeleteQuery]()
)

func Where[Q psql.Filterable]() struct {
	Matches                  matchWhere[Q]
	Migrations               migrationWhere[Q]
	Players                  playerWhere[Q]
	Tournaments              tournamentWhere[Q]
	TournamentParticipations tournamentParticipationWhere[Q]
} {
	return struct {
		Matches                  matchWhere[Q]
		Migrations               migrationWhere[Q]
		Players                  playerWhere[Q]
		Tournaments              tournamentWhere[Q]
		TournamentParticipations tournamentParticipationWhere[Q]
	}{
		Matches:                  MatchWhere[Q](),
		Migrations:               MigrationWhere[Q](),
		Players:                  PlayerWhere[Q](),
		Tournaments:              TournamentWhere[Q](),
		TournamentParticipations: TournamentParticipationWhere[Q](),
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]
	UpdateJoins = getJoins[*dialect.UpdateQuery]
	DeleteJoins = getJoins[*dialect.DeleteQuery]
)

type joinSet[Q any] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

type joins[Q dialect.Joinable] struct {
	Matches                  joinSet[matchRelationshipJoins[Q]]
	Players                  joinSet[playerRelationshipJoins[Q]]
	Tournaments              joinSet[tournamentRelationshipJoins[Q]]
	TournamentParticipations joinSet[tournamentParticipationRelationshipJoins[Q]]
}

func getJoins[Q dialect.Joinable](ctx context.Context) joins[Q] {
	return joins[Q]{
		Matches:                  matchesJoin[Q](ctx),
		Players:                  playersJoin[Q](ctx),
		Tournaments:              tournamentsJoin[Q](ctx),
		TournamentParticipations: tournamentParticipationsJoin[Q](ctx),
	}
}
