// Code generated by the local DBGEN tool. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "github.com/ArnaudLasnier/pingpong/internal/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type TournamentMod interface {
	Apply(*TournamentTemplate)
}

type TournamentModFunc func(*TournamentTemplate)

func (f TournamentModFunc) Apply(n *TournamentTemplate) {
	f(n)
}

type TournamentModSlice []TournamentMod

func (mods TournamentModSlice) Apply(n *TournamentTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TournamentTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TournamentTemplate struct {
	ID        func() uuid.UUID
	Title     func() string
	Status    func() TournamentStatus
	StartedAt func() null.Val[time.Time]
	EndedAt   func() null.Val[time.Time]

	r tournamentR
	f *Factory
}

type tournamentR struct {
	Matches []*tournamentRMatchesR
	Players []*tournamentRPlayersR
}

type tournamentRMatchesR struct {
	number int
	o      *MatchTemplate
}
type tournamentRPlayersR struct {
	number int
	o      *PlayerTemplate
}

// Apply mods to the TournamentTemplate
func (o *TournamentTemplate) Apply(mods ...TournamentMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Tournament
// this does nothing with the relationship templates
func (o TournamentTemplate) toModel() *models.Tournament {
	m := &models.Tournament{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Title != nil {
		m.Title = o.Title()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.StartedAt != nil {
		m.StartedAt = o.StartedAt()
	}
	if o.EndedAt != nil {
		m.EndedAt = o.EndedAt()
	}

	return m
}

// toModels returns an models.TournamentSlice
// this does nothing with the relationship templates
func (o TournamentTemplate) toModels(number int) models.TournamentSlice {
	m := make(models.TournamentSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Tournament
// according to the relationships in the template. Nothing is inserted into the db
func (t TournamentTemplate) setModelRels(o *models.Tournament) {
	if t.r.Matches != nil {
		rel := models.MatchSlice{}
		for _, r := range t.r.Matches {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.TournamentID = o.ID
				rel.R.Tournament = o
			}
			rel = append(rel, related...)
		}
		o.R.Matches = rel
	}

	if t.r.Players != nil {
		rel := models.PlayerSlice{}
		for _, r := range t.r.Players {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Tournaments = append(rel.R.Tournaments, o)
			}
			rel = append(rel, related...)
		}
		o.R.Players = rel
	}
}

// BuildSetter returns an *models.TournamentSetter
// this does nothing with the relationship templates
func (o TournamentTemplate) BuildSetter() *models.TournamentSetter {
	m := &models.TournamentSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Title != nil {
		m.Title = omit.From(o.Title())
	}
	if o.Status != nil {
		m.Status = omit.From(o.Status())
	}
	if o.StartedAt != nil {
		m.StartedAt = omitnull.FromNull(o.StartedAt())
	}
	if o.EndedAt != nil {
		m.EndedAt = omitnull.FromNull(o.EndedAt())
	}

	return m
}

// BuildManySetter returns an []*models.TournamentSetter
// this does nothing with the relationship templates
func (o TournamentTemplate) BuildManySetter(number int) []*models.TournamentSetter {
	m := make([]*models.TournamentSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Tournament
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TournamentTemplate.Create
func (o TournamentTemplate) Build() *models.Tournament {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TournamentSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TournamentTemplate.CreateMany
func (o TournamentTemplate) BuildMany(number int) models.TournamentSlice {
	m := make(models.TournamentSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTournament(m *models.TournamentSetter) {
	if m.Title.IsUnset() {
		m.Title = omit.From(random[string](nil))
	}
	if m.Status.IsUnset() {
		m.Status = omit.From(random[TournamentStatus](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Tournament
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TournamentTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Tournament) (context.Context, error) {
	var err error

	if o.r.Matches != nil {
		for _, r := range o.r.Matches {
			var rel0 models.MatchSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachMatches(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Players != nil {
		for _, r := range o.r.Players {
			var rel1 models.PlayerSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachPlayers(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a tournament and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TournamentTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Tournament, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a tournament and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TournamentTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Tournament, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTournament(opt)

	m, err := models.Tournaments.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = tournamentCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple tournaments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TournamentTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TournamentSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple tournaments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TournamentTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TournamentSlice, error) {
	var err error
	m := make(models.TournamentSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Tournament has methods that act as mods for the TournamentTemplate
var TournamentMods tournamentMods

type tournamentMods struct{}

func (m tournamentMods) RandomizeAllColumns(f *faker.Faker) TournamentMod {
	return TournamentModSlice{
		TournamentMods.RandomID(f),
		TournamentMods.RandomTitle(f),
		TournamentMods.RandomStatus(f),
		TournamentMods.RandomStartedAt(f),
		TournamentMods.RandomEndedAt(f),
	}
}

// Set the model columns to this value
func (m tournamentMods) ID(val uuid.UUID) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) IDFunc(f func() uuid.UUID) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetID() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomID(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

func (m tournamentMods) ensureID(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) Title(val string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Title = func() string { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) TitleFunc(f func() string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Title = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetTitle() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Title = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomTitle(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Title = func() string {
			return random[string](f)
		}
	})
}

func (m tournamentMods) ensureTitle(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.Title != nil {
			return
		}

		o.Title = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) Status(val TournamentStatus) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Status = func() TournamentStatus { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) StatusFunc(f func() TournamentStatus) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetStatus() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomStatus(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Status = func() TournamentStatus {
			return random[TournamentStatus](f)
		}
	})
}

func (m tournamentMods) ensureStatus(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.Status != nil {
			return
		}

		o.Status = func() TournamentStatus {
			return random[TournamentStatus](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) StartedAt(val null.Val[time.Time]) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.StartedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) StartedAtFunc(f func() null.Val[time.Time]) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.StartedAt = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetStartedAt() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.StartedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomStartedAt(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.StartedAt = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

func (m tournamentMods) ensureStartedAt(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.StartedAt != nil {
			return
		}

		o.StartedAt = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) EndedAt(val null.Val[time.Time]) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.EndedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) EndedAtFunc(f func() null.Val[time.Time]) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.EndedAt = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetEndedAt() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.EndedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomEndedAt(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.EndedAt = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

func (m tournamentMods) ensureEndedAt(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.EndedAt != nil {
			return
		}

		o.EndedAt = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

func (m tournamentMods) WithMatches(number int, related *MatchTemplate) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Matches = []*tournamentRMatchesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m tournamentMods) WithNewMatches(number int, mods ...MatchMod) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		related := o.f.NewMatch(mods...)
		m.WithMatches(number, related).Apply(o)
	})
}

func (m tournamentMods) AddMatches(number int, related *MatchTemplate) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Matches = append(o.r.Matches, &tournamentRMatchesR{
			number: number,
			o:      related,
		})
	})
}

func (m tournamentMods) AddNewMatches(number int, mods ...MatchMod) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		related := o.f.NewMatch(mods...)
		m.AddMatches(number, related).Apply(o)
	})
}

func (m tournamentMods) WithoutMatches() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Matches = nil
	})
}

func (m tournamentMods) WithPlayers(number int, related *PlayerTemplate) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Players = []*tournamentRPlayersR{{
			number: number,
			o:      related,
		}}
	})
}

func (m tournamentMods) WithNewPlayers(number int, mods ...PlayerMod) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		related := o.f.NewPlayer(mods...)
		m.WithPlayers(number, related).Apply(o)
	})
}

func (m tournamentMods) AddPlayers(number int, related *PlayerTemplate) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Players = append(o.r.Players, &tournamentRPlayersR{
			number: number,
			o:      related,
		})
	})
}

func (m tournamentMods) AddNewPlayers(number int, mods ...PlayerMod) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		related := o.f.NewPlayer(mods...)
		m.AddPlayers(number, related).Apply(o)
	})
}

func (m tournamentMods) WithoutPlayers() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Players = nil
	})
}
